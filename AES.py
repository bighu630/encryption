import numpy as np

# s盒
sbox = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        ]
# 逆S盒子
dbox = [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
        ]
# 轮函数矩阵
DotMatrlx = np.array([[1, 0, 0, 0, 1, 1, 1, 1],
                      [1, 1, 0, 0, 0, 1, 1, 1],
                      [1, 1, 1, 0, 0, 0, 1, 1],
                      [1, 1, 1, 1, 0, 0, 0, 1],
                      [1, 1, 1, 1, 1, 0, 0, 0],
                      [0, 1, 1, 1, 1, 1, 0, 0],
                      [0, 0, 1, 1, 1, 1, 1, 0],
                      [0, 0, 0, 1, 1, 1, 1, 1]])

# 逆矩阵
DDMat = np.array([[2, 2, -3, 2, 2, -3, 2, -3],
                  [-3, 2, 2, -3, 2, 2, -3, 2],
                  [2, -3, 2, 2, -3, 2, 2, -3],
                  [-3, 2, -3, 2, 2, -3, 2, 2],
                  [2, -3, 2, -3, 2, 2, -3, 2],
                  [2, 2, -3, 2, -3, 2, 2, -3],
                  [-3, 2, 2, -3, 2, -3, 2, 2],
                  [2, -3, 2, 2, -3, 2, -3, 2]])

# 轮函数矩阵
AddMatrlx = np.array([1, 1, 0, 0, 0, 1, 1, 0]).T

# 列混合矩阵
MC = np.array([[2, 3, 1, 1],
               [1, 2, 3, 1],
               [1, 1, 2, 3],
               [3, 1, 1, 2]])

DMC = np.array([[0x0e, 0xb, 0x0d, 0x09],
                [0x09, 0x0e, 0x0b, 0x0d],
                [0x0d, 0x09, 0x0e, 0x0b],
                [0x0b, 0x0d, 0x09, 0x0e]])


class AES:

    # 数据分块
    def DivideString(self, data):
        Datalist = []
        td = list(map(ord, list(data)))
        derta = 0
        if(len(td) % 16 != 0):
            derta = 16-len(td) % 16
            td = td+[0]*derta
        td = td+[255]*16
        if derta != 0:
            td[-1] = derta
        for i in range(len(td)//16):
            Datalist.append(
                np.array(td[16*i:16*i+16]).reshape(4, 4))
        return Datalist

    # 整理成字符串
    def reveToString(self, data):
        end = data[-1][3, 3]
        reData = ""
        for i in range(len(data)-2):
            for j in np.nditer(i):
                reData += chr(j)
        for j, k in zip(np.nditer(data[-2]), range(16)):
            if k == 16-end:
                break
            reData += chr(j)
            k += 1
        return reData

    # 加密过程
    def Encode(self, data, srekey,lun):
        if type(data) == str:
            DividedData = self.DivideString(data)
            EncodeList = []
        for i in DividedData:
            temp = i
            for j in range(lun-1):
                key = srekey[:, 4*j:j*4+4]
                temp = self.ByteSub(temp)
                temp = self.ShiftRow(temp)
                temp = self.MixColumn(temp)
                temp = self.AddRoundKey(temp, key)
            key = srekey[:, 4*lun-4:4*lun]
            temp = self.ByteSub(temp)
            temp = self.ShiftRow(temp)
            temp = self.AddRoundKey(temp, key)
            EncodeList.append(temp)
        return EncodeList

    # 解密过程
    def Decode(self, data, srekey,lun):
        DecodeList = []
        for i in data:
            temp = i
            key = srekey[:, 4*lun-4:4*lun]
            temp = self.AddRoundKey(temp, key)
            temp = self.ShiftRow(temp, True)
            temp = self.ByteSub(temp, True)
            for j in range(lun-1):
                key = srekey[:, 4*lun-8-4*j:4*lun-4-4*j]
                temp = self.AddRoundKey(temp, key)
                temp = self.MixColumn(temp, True)
                temp = self.ShiftRow(temp, True)
                temp = self.ByteSub(temp, True)
            DecodeList.append(temp.astype(np.uint8))
        return DecodeList

    # 产生初始密钥矩阵
    def MkMatrix(self, dt,keylong):
        M = np.zeros((4, int( keylong/32 )))
        for i in range(4):
            for j in range(int( keylong/32 )):
                M[i][j] = dt % 2**8
                dt = dt//2**8
        return M

    # S盒转换
    def Exchange(self, arr, box):
        temp = np.zeros((4, 1), dtype='int')
        s = 0
        for i in np.nditer(arr):
            t = int(i % 2**4)
            q = int(i//2**4)
            temp[s][0] = box[q*16+t]
            s += 1
        return temp

    # 产生密钥
    def MkKey(self, skey,lun):
        lundire={10:4,12:6,14:8}
        key = np.zeros((4, 4*lun), dtype='uint8')
        key[:, :lundire[lun]] = skey
        temp = np.zeros((4, 1))
        tr = np.zeros((4, 1))
        for i in range(4, 4*lun):
            # 能被4整除就进行置换
            if i % 4 == 0:
                tr = np.array([key[1][i-1], key[2][i-1], key[3]
                               [i-1], key[0][i-1]])
                temp = self.Exchange(tr, sbox)
                key[:, i] = temp.T
            else:
                key[:, i] = key[:, i-4]
            key[:, i] = key[:, i] ^ key[:, i-1]
        return key

    # 字节代换
    def ByteSub(self, data, decode=False):
        j = 0
        if decode:
            for i in np.nditer(data.astype(np.uint8)):
                L4 = int(i % 2**4)
                R4 = int(i//2**4)
                data[j//4][j % 4] = dbox[16*R4+L4]
                j += 1
        else:
            for i in np.nditer(data.astype(np.uint8)):
                L4 = int(i % 2**4)
                R4 = int(i//2**4)
                data[j//4][j % 4] = sbox[16*R4+L4]
                j += 1
        return data

    # 行移位
    def ShiftRow(self, data, decode=False):
        if decode:
            for i in range(4):
                data[i][0], data[i][1], data[i][2], data[i][3] = data[i][-i], data[i][1 -
                                                                                      i], data[i][2-i], data[i][3-i]
        else:
            for i in range(4):
                data[i][0], data[i][1], data[i][2], data[i][3] = data[i][i -
                                                                         4], data[i][i-3], data[i][i-2], data[i][i-1]
        return (data.astype(np.uint8))

    # 列混合
    def MixColumn(self, data, decode=False):
        return data
    # 密钥加
    def AddRoundKey(self, data, key):
        return (data ^ key).astype(np.uint8)


keylo=(128,192,256)
numlun={128:10,192:12,256:14}
s = AES()
soukey = 42118119991206  # 产生随机密钥
print("密钥为",soukey)
print("请选择密钥长度1.128  2.192  3.256")
a=input()
sreKey = s.MkKey(s.MkMatrix(soukey,keylo[int(a)-1]),numlun[keylo[int(a)-1]])  # 产生所有的密钥
st = '1910301108huteng'
print("明文为",st)
mw=s.Encode(st, sreKey,numlun[keylo[int(a)-1]])
print("密文为",s.reveToString(mw))
sd = s.reveToString(s.Decode(mw, sreKey,numlun[keylo[int(a)-1]]))
print("解密后",sd)
