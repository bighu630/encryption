#!/usr/bin/env python
# -*- coding=utf8 -*-
"""
# Author: bighu
# Created Time : 2021年12月02日 星期四 20时06分09秒
# File Name: sm4.py
# Description:
"""
SBOX = [
    0xD6, 0x90, 0xE9, 0xFE, 0xCC, 0xE1, 0x3D, 0xB7, 0x16, 0xB6, 0x14, 0xC2, 0x28, 0xFB, 0x2C, 0x05, 0x2B, 0x67, 0x9A,
    0x76, 0x2A, 0xBE, 0x04, 0xC3, 0xAA, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9C, 0x42, 0x50, 0xF4, 0x91, 0xEF,
    0x98, 0x7A, 0x33, 0x54, 0x0B, 0x43, 0xED, 0xCF, 0xAC, 0x62, 0xE4, 0xB3, 0x1C, 0xA9, 0xC9, 0x08, 0xE8, 0x95, 0x80,
    0xDF, 0x94, 0xFA, 0x75, 0x8F, 0x3F, 0xA6, 0x47, 0x07, 0xA7, 0xFC, 0xF3, 0x73, 0x17, 0xBA, 0x83, 0x59, 0x3C, 0x19,
    0xE6, 0x85, 0x4F, 0xA8, 0x68, 0x6B, 0x81, 0xB2, 0x71, 0x64, 0xDA, 0x8B, 0xF8, 0xEB, 0x0F, 0x4B, 0x70, 0x56, 0x9D,
    0x35, 0x1E, 0x24, 0x0E, 0x5E, 0x63, 0x58, 0xD1, 0xA2, 0x25, 0x22, 0x7C, 0x3B, 0x01, 0x21, 0x78, 0x87, 0xD4, 0x00,
    0x46, 0x57, 0x9F, 0xD3, 0x27, 0x52, 0x4C, 0x36, 0x02, 0xE7, 0xA0, 0xC4, 0xC8, 0x9E, 0xEA, 0xBF, 0x8A, 0xD2, 0x40,
    0xC7, 0x38, 0xB5, 0xA3, 0xF7, 0xF2, 0xCE, 0xF9, 0x61, 0x15, 0xA1, 0xE0, 0xAE, 0x5D, 0xA4, 0x9B, 0x34, 0x1A, 0x55,
    0xAD, 0x93, 0x32, 0x30, 0xF5, 0x8C, 0xB1, 0xE3, 0x1D, 0xF6, 0xE2, 0x2E, 0x82, 0x66, 0xCA, 0x60, 0xC0, 0x29, 0x23,
    0xAB, 0x0D, 0x53, 0x4E, 0x6F, 0xD5, 0xDB, 0x37, 0x45, 0xDE, 0xFD, 0x8E, 0x2F, 0x03, 0xFF, 0x6A, 0x72, 0x6D, 0x6C,
    0x5B, 0x51, 0x8D, 0x1B, 0xAF, 0x92, 0xBB, 0xDD, 0xBC, 0x7F, 0x11, 0xD9, 0x5C, 0x41, 0x1F, 0x10, 0x5A, 0xD8, 0x0A,
    0xC1, 0x31, 0x88, 0xA5, 0xCD, 0x7B, 0xBD, 0x2D, 0x74, 0xD0, 0x12, 0xB8, 0xE5, 0xB4, 0xB0, 0x89, 0x69, 0x97, 0x4A,
    0x0C, 0x96, 0x77, 0x7E, 0x65, 0xB9, 0xF1, 0x09, 0xC5, 0x6E, 0xC6, 0x84, 0x18, 0xF0, 0x7D, 0xEC, 0x3A, 0xDC, 0x4D,
    0x20, 0x79, 0xEE, 0x5F, 0x3E, 0xD7, 0xCB, 0x39, 0x48
]


class SM4:
    def DivideString(self, data):
        '''
        data -> str
        将数据划分与补位
        '''
        Datalist = list(map(ord, list(data)))
        derta = 0
        if(len(Datalist) % 4 != 0):
            derta = 4-(len(Datalist) % 4)
            Datalist += [0]*derta
        Datalist += [0]*4
        if derta != 0:
            Datalist[-1] = derta
        return Datalist

    def reveToString(self, data,bdecode=False):
        '''
        将int数组还原成str字符串
        '''
        if bdecode:
            end = data[-1]
        else:
            end = -4
        strData = ''
        for i in range(len(data)-4-end):
            strData += chr(data[i])
        return strData

    def funL(self, data):
        '''
        对应的L函数
        '''
        def funtemp(a, b): return (a >> (32-b)+(a << b)) & 0xffffffff
        data = data ^ funtemp(data, 2) ^ funtemp(
            data, 10) ^ funtemp(data, 18) ^ funtemp(data, 24)
        return data

    def funL2(self, data):
        '''
        用于密钥产生的L2函数
        '''
        def funtemp(a, b): return (a >> (32-b)+(a << b)) & 0xffffffff
        data = data ^ funtemp(data, 13) ^ funtemp(data, 23)
        return data

    def funF(self,*data):
        return data[0]^self.funL(self.sboxAnInt(data[1]^data[2]^data[3]^data[4]))

    def sboxAnInt(self, data):
        '''
        将一个int(32位)型数据进行s盒
        '''
        a, b, c, d = (data & 0xff000000) >> 24, (data &
                                                 0x00ff0000) >> 16, (data & 0x0000ff00) >> 8, data & 0x000000ff
        return (SBOX[a] << 24)+(SBOX[b] << 16)+(SBOX[c] << 8)+SBOX[d]

    def makeKey(self, data):
        '''
        将一个128（4个32位）的密钥拓展成32*128
        '''
        CK = [0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9, 0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4ab2b9,
              0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299, 0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279]
        FK0 = 0xA3B1BAC6
        FK1 = 0x56AA3350
        FK2 = 0x677D9197
        FK3 = 0xB27022DC
        rk = []
        K = [data[0] ^ FK0, data[1] ^ FK1, data[2] ^ FK2, data[3] ^ FK3]
        for i in range(32):
            rk.append (K[i] ^ self.funL2(self.sboxAnInt(
                K[i+1] ^ K[i+2] ^ K[i+3]  ^ CK[i])))
            K.append(rk[i])
        return rk

    def __init__(self,key):
        '''
        初始化密钥
        '''
        keylist=[]
        for i in range(4):
            try:
                keylist.append(ord(key[i]))
            except:
                keylist.append(0)
        self.rk=self.makeKey(keylist)

    def encode(self,data):
        '''
        data: str
        加密函数
        '''
        sreStr=self.DivideString(data)
        cryData=[]
        onceinput=[]
        for i in range(len(sreStr)//4):
            onceinput=sreStr[4*i:4*i+4]
            for j in range(32):
                onceinput.append(self.funF(onceinput[j],onceinput[j+1],onceinput[j+2],onceinput[j+3],self.rk[j]))
            cryData+=[onceinput[35],onceinput[34],onceinput[33],onceinput[32]]
        return cryData

    def decode(self,data):
        '''
        解密函数
        '''
        cryData=[]
        onceinput=[]
        self.rk.reverse()
        for i in range(len(data)//4):
            onceinput=data[4*i:4*i+4]
            for j in range(32):
                onceinput.append(self.funF(onceinput[j],onceinput[j+1],onceinput[j+2],onceinput[j+3],self.rk[j]))
            cryData+=[onceinput[35],onceinput[34],onceinput[33],onceinput[32]]
        return self.reveToString(cryData,bdecode=True)

key = input("请输入你的密钥（4位/可以是中文)")
sm4=SM4(key)
mess=input("请输入要加密的字符串/（可以是中文）")
crymess=sm4.encode(mess)
print("密文是：",crymess)
decrymess = sm4.decode(crymess)
print("解密后：",decrymess)
